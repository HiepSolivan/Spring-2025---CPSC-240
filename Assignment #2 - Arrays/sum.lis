     1                                  ;****************************************************************************************************************************
     2                                  ; Program name: "Arrays".  The intent of this program is to sort, print, and compute the mean of an array of float numbers   *
     3                                  ; in which the array was constructed using user input. The educational purpose is to gain experience programming with arrays *                                                              *
     4                                  ; Copyright (C) 2025  Solivan Hiep                                                                                           *
     5                                  ; This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License  *
     6                                  ; version 3 as published by the Free Software Foundation.                                                                    *
     7                                  ; This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied         *
     8                                  ; warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.     *
     9                                  ; A copy of the GNU General Public License v3 is available here:  <https://www.gnu.org/licenses/>.                           *
    10                                  ;****************************************************************************************************************************
    11                                  
    12                                  
    13                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3=========4=========5=========6=========7**
    14                                  
    15                                  ;Author information
    16                                  ;  Author name: Solivan Hiep
    17                                  ;  Author email: hiepsolivan@csu.fullerton.edu
    18                                  ;  CWID: 8848458756
    19                                  ;  Class: CPSC 240-03 - Class Nbr 13604
    20                                  ;
    21                                  ;Program information
    22                                  ;  Program name: Arrays
    23                                  ;  Programming languages: Six modules in X86, one module in C, one module in C++, and one in bash
    24                                  ;  Date program began: 2025-Feb-09
    25                                  ;  Date of last update: 2025-Feb-20
    26                                  ;  Files in the program: manager.asm, input_array.asm, isfloat.asm, output_array.asm, sum.asm, swap.asm, sort.c, main.c, r.sh
    27                                  ;
    28                                  ;Purpose
    29                                  ;  The intent of this program is to sort, print, and compute the mean of an array of float numbers
    30                                  ;  in which the array was constructed using user input.
    31                                  ;  The educational purpose is to gain experience programming with arrays.
    32                                  ;
    33                                  ;This file
    34                                  ;  File name: sum.asm
    35                                  ;  Language: X86-64
    36                                  ;  Max page width: 172 columns
    37                                  ;  Assemble: nasm -f elf64 -l sum.lis -o sum.o sum.asm
    38                                  ;  Page width: 172 columns
    39                                  ;  Optimal print specification: Landscape, 7 points, monospace, 8Â½x11 paper
    40                                  ;  Prototype of this function: double sum(double array[], long size)
    41                                  ;
    42                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3=========4=========5=========6=========7**
    43                                  ;
    44                                  ;===== Begin code area ====================================================================================================================================================
    45                                  
    46                                  ; Declarations
    47                                  extern printf
    48                                  
    49                                  global sum
    50                                  
    51                                  ; Declare initialized arrays
    52                                  segment .data
    53                                  
    54                                  ; Declare uninitialized arrays
    55                                  segment .bss
    56                                  align 64
    57 00000000 <res 340h>              backup_storage_area resb 832
    58                                  
    59                                  segment .text
    60                                  sum:
    61                                  
    62                                  ; Backup the GPRs
    63 00000000 55                      push rbp
    64 00000001 4889E5                  mov rbp, rsp
    65 00000004 53                      push rbx
    66 00000005 51                      push rcx
    67 00000006 52                      push rdx
    68 00000007 57                      push rdi
    69 00000008 56                      push rsi
    70 00000009 4150                    push r8
    71 0000000B 4151                    push r9
    72 0000000D 4152                    push r10
    73 0000000F 4153                    push r11
    74 00000011 4154                    push r12
    75 00000013 4155                    push r13
    76 00000015 4156                    push r14
    77 00000017 4157                    push r15
    78 00000019 9C                      pushf
    79                                  
    80                                  ; Backup other registers/sse registers
    81 0000001A B807000000              mov rax, 7
    82 0000001F BA00000000              mov rdx, 0
    83 00000024 0FAE2425[00000000]      xsave [backup_storage_area]
    84                                  
    85                                  ; Move the arguments received (the address to the array + array size) into non-volatile registers r12 and r13 to affect the actual array + future use in logic
    86 0000002C 4989FC                  mov r12, rdi ; The array
    87 0000002F 4989F5                  mov r13, rsi ; The array's size
    88                                  
    89                                  ; Maintain a counter for the array using the non-volatile register r14 to ensure no over-indexing
    90 00000032 4D31F6                  xor r14, r14 ; Comparing r14 to itself via xor sets r14 to 0
    91                                  
    92                                  ; Kick of the main loop to find the sum of all the elements in the array
    93                                  top_of_loop:
    94                                  
    95                                  ; Check for over-indexing by determining if r14 >= r13. If so, exit. Otherwise, continue
    96 00000035 4D39EE                  cmp r14, r13
    97 00000038 7D10                    jge out_of_loop
    98                                  
    99                                  ; Take the element at the counter [r14] and add it to the to a non-volatile register so operations are maintained
   100 0000003A F2470F1034F4            movsd xmm14, [r12 + r14 * 8]
   101 00000040 F2450F58FE              addsd xmm15, xmm14
   102                                  
   103                                  ; Increment the counter [r14] by 1 and jump back to the top of the loop
   104 00000045 49FFC6                  inc r14
   105 00000048 EBEB                    jmp top_of_loop
   106                                  ; End of main loop to print out each element in the array
   107                                  
   108                                  ; Exit the main loop and complete the program
   109                                  out_of_loop:
   110                                  
   111                                  ; Move the sum to the stack before restoring SSEs to maintain the value
   112 0000004A B800000000              mov rax, 0
   113 0000004F 6A00                    push qword 0
   114 00000051 F2440F113C24            movsd [rsp], xmm15
   115                                  
   116                                  ; Restore the values to non-GPRs/sse registers
   117 00000057 B807000000              mov rax, 7
   118 0000005C BA00000000              mov rdx, 0
   119 00000061 0FAE2C25[00000000]      xrstor [backup_storage_area]
   120                                  
   121                                  ; Send back the sum stored in rsp
   122 00000069 F20F100424              movsd xmm0, [rsp]
   123 0000006E 58                      pop rax
   124                                  
   125                                  ; Restore the GPRs
   126 0000006F 9D                      popf
   127 00000070 415F                    pop r15
   128 00000072 415E                    pop r14
   129 00000074 415D                    pop r13
   130 00000076 415C                    pop r12
   131 00000078 415B                    pop r11
   132 0000007A 415A                    pop r10
   133 0000007C 4159                    pop r9
   134 0000007E 4158                    pop r8
   135 00000080 5E                      pop rsi
   136 00000081 5F                      pop rdi
   137 00000082 5A                      pop rdx
   138 00000083 59                      pop rcx
   139 00000084 5B                      pop rbx
   140 00000085 5D                      pop rbp   ;Restore rbp to the base of the activation record of the caller program
   141 00000086 C3                      ret
   142                                  ;End of the function sum ====================================================================
