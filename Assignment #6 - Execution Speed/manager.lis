     1                                  ;****************************************************************************************************************************
     2                                  ; Program name: "Execution Speed".  The academic objective is to learn how to utilize the clock.
     3                                  ; The application objective is to measure the average time require to perform one floating point addition: addsd xmm10,xmm11 *
     4                                  ; Copyright (C) 2025  Solivan Hiep                                                                                           *
     5                                  ; This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License  *
     6                                  ; version 3 as published by the Free Software Foundation.                                                                    *
     7                                  ; This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied         *
     8                                  ; warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.     *
     9                                  ; A copy of the GNU General Public License v3 is available here:  <https://www.gnu.org/licenses/>.                           *
    10                                  ;****************************************************************************************************************************
    11                                  
    12                                  
    13                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3=========4=========5=========6=========7**
    14                                  
    15                                  ;Author information
    16                                  ;  Author name: Solivan Hiep
    17                                  ;  Author email: hiepsolivan@csu.fullerton.edu
    18                                  ;  CWID: 8848458756
    19                                  ;  Class: CPSC 240-03 - Class Nbr 13604
    20                                  ;
    21                                  ;Program information
    22                                  ;  Program name: Execution Speed
    23                                  ;  Programming languages: Six modules in X86, two modules in C++, and one in bash
    24                                  ;  Date program began: 2025-Apr-21
    25                                  ;  Date of last update: 2025-Apr-25
    26                                  ;  Files in the program: manager.asm, input_array.asm, isfloat.asm, sum.asm, getfrequency.asm, utilities.inc, clock.cpp, r.sh
    27                                  ;
    28                                  ;Purpose
    29                                  ;  The academic objective is to learn how to utilize the clock.
    30                                  ;  The application objective is to measure the average time require to perform one floating point addition: addsd xmm10,xmm11
    31                                  ;
    32                                  ;This file
    33                                  ;  File name: manager.asm
    34                                  ;  Language: X86-64
    35                                  ;  Development Platform: Windows 11 Enterprise Ver. 24H2. Intel(R) Core(TM) i3-8145U CPU @ 2.10GHz 2.30 GHz Processor. Running on Ubuntu 22.04.5 LTS.
    36                                  ;  Max page width: 172 columns
    37                                  ;  Assemble: nasm -f elf64 -l manager.lis -o manager.o manager.asm
    38                                  ;  Assemble (debug in GDB): nasm -f elf64 -gdwarf -l manager.lis -o manager.o manager.asm
    39                                  ;  Page width: 172 columns
    40                                  ;  Optimal print specification: Landscape, 7 points, monospace, 8Â½x11 paper
    41                                  ;  Prototype of this function: double manaager()
    42                                  ;
    43                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3=========4=========5=========6=========7**
    44                                  ;
    45                                  ;===== Begin code area ====================================================================================================================================================
    46                                  
    47                                  ; Declarations
    48                                  %include "utilities.inc"
    49                              <1> ; Macro that backs up the GPRs
    50                              <1> %macro backup_gprs 0
    51                              <1>   push rbp
    52                              <1>   mov rbp, rsp
    53                              <1>   push rbx
    54                              <1>   push rcx
    55                              <1>   push rdx
    56                              <1>   push rdi
    57                              <1>   push rsi
    58                              <1>   push r8
    59                              <1>   push r9
    60                              <1>   push r10
    61                              <1>   push r11
    62                              <1>   push r12
    63                              <1>   push r13
    64                              <1>   push r14
    65                              <1>   push r15
    66                              <1>   pushf
    67                              <1> %endmacro
    68                              <1> 
    69                              <1> ; Macro that restores the GPRs
    70                              <1> %macro restore_gprs 0
    71                              <1>   popf
    72                              <1>   pop r15
    73                              <1>   pop r14
    74                              <1>   pop r13
    75                              <1>   pop r12
    76                              <1>   pop r11
    77                              <1>   pop r10
    78                              <1>   pop r9
    79                              <1>   pop r8
    80                              <1>   pop rsi
    81                              <1>   pop rdi
    82                              <1>   pop rdx
    83                              <1>   pop rcx
    84                              <1>   pop rbx
    85                              <1>   pop rbp
    86                              <1> %endmacro
    87                              <1> 
    88                              <1> ; Macro that back ups non-GPRs/SSEs to an array stored in parameter %1
    89                              <1> %macro backup_non_gprs 1
    90                              <1>   mov rax, 7
    91                              <1>   mov rdx, 0
    92                              <1>   xsave [%1]
    93                              <1> %endmacro
    94                              <1> 
    95                              <1> ; Macro that restores the non-GPRs/SSEs in storage array of parameter %1
    96                              <1> %macro restore_non_gprs 1
    97                              <1>   mov rax, 7
    98                              <1>   mov rdx, 0
    99                              <1>   xrstor [%1]
   100                              <1> %endmacro
   101                              <1> 
   102                              <1> ; Macro that obtains the current number of ticks from the clock and places them in rdx
   103                              <1> %macro extract_tics 0
   104                              <1>   mov rdx, 0
   105                              <1>   cpuid
   106                              <1>   rdtsc
   107                              <1>   shl rdx, 32
   108                              <1>   add rdx, rax
   109                              <1> %endmacro
    49                                  global manager
    50                                  extern input_array
    51                                  extern sum
    52                                  extern getfreq
    53                                  
    54                                  extern printf
    55                                  
    56                                  ; Declaring initialized arrays
    57                                  segment .data
    58 00000000 546865207072657365-     present_clock_time_msg db "The present time on the clock is %li tics", 10, 10, 0
    58 00000009 6E742074696D65206F-
    58 00000012 6E2074686520636C6F-
    58 0000001B 636B20697320256C69-
    58 00000024 20746963730A0A00   
    59 0000002C 456E74657220666C6F-     array_input_msg db "Enter float numbers positive or negative separated by ws. Terminate with control+d", 10, 0
    59 00000035 6174206E756D626572-
    59 0000003E 7320706F7369746976-
    59 00000047 65206F72206E656761-
    59 00000050 746976652073657061-
    59 00000059 726174656420627920-
    59 00000062 77732E205465726D69-
    59 0000006B 6E6174652077697468-
    59 00000074 20636F6E74726F6C2B-
    59 0000007D 640A00             
    60 00000080 5468652073756D206F-     sum_msg db "The sum of these numbers is %.3lf", 10, 0
    60 00000089 66207468657365206E-
    60 00000092 756D62657273206973-
    60 0000009B 20252E336C660A00   
    61 000000A3 54686520746F74616C-     total_time_msg db "The total time to perform the additions in the ALU was %li tics.", 10, 0
    61 000000AC 2074696D6520746F20-
    61 000000B5 706572666F726D2074-
    61 000000BE 686520616464697469-
    61 000000C7 6F6E7320696E207468-
    61 000000D0 6520414C5520776173-
    61 000000D9 20256C692074696373-
    61 000000E2 2E0A00             
    62 000000E5 546861742069732061-     average_time_msg db "That is an average of %.1lf tics per each addition.", 10, 0
    62 000000EE 6E2061766572616765-
    62 000000F7 206F6620252E316C66-
    62 00000100 207469637320706572-
    62 00000109 206561636820616464-
    62 00000112 6974696F6E2E0A00   
    63 0000011A 54686174206E756D62-     ns_msg db "That number of tics equals %.1lf ns.", 10, 10, 0
    63 00000123 6572206F6620746963-
    63 0000012C 7320657175616C7320-
    63 00000135 252E316C66206E732E-
    63 0000013E 0A0A00             
    64 00000141 2573                    string_format db "%s"
    65                                  
    66                                  ; Declaring uninitialized arrays
    67                                  segment .bss
    68                                  align 64
    69 00000000 <res 340h>              backup_storage_area resb 832
    70                                  
    71 00000340 <res 200h>              the_array resq 64
    72                                  
    73                                  segment .text
    74                                  manager:
    75                                  
    76                                  ; Call the macro that backs up the GPRs
    77                                  backup_gprs
    51 00000000 55                  <1>  push rbp
    52 00000001 4889E5              <1>  mov rbp, rsp
    53 00000004 53                  <1>  push rbx
    54 00000005 51                  <1>  push rcx
    55 00000006 52                  <1>  push rdx
    56 00000007 57                  <1>  push rdi
    57 00000008 56                  <1>  push rsi
    58 00000009 4150                <1>  push r8
    59 0000000B 4151                <1>  push r9
    60 0000000D 4152                <1>  push r10
    61 0000000F 4153                <1>  push r11
    62 00000011 4154                <1>  push r12
    63 00000013 4155                <1>  push r13
    64 00000015 4156                <1>  push r14
    65 00000017 4157                <1>  push r15
    66 00000019 9C                  <1>  pushf
    78                                  
    79                                  ; Call the macro that backs up the non-GPRs/SSEs into the backup_storage_area
    80                                  backup_non_gprs backup_storage_area
    90 0000001A B807000000          <1>  mov rax, 7
    91 0000001F BA00000000          <1>  mov rdx, 0
    92 00000024 0FAE2425[00000000]  <1>  xsave [%1]
    81                                  
    82                                  ; Call the macro to obtain the current clock time in tics
    83                                  extract_tics
   104 0000002C BA00000000          <1>  mov rdx, 0
   105 00000031 0FA2                <1>  cpuid
   106 00000033 0F31                <1>  rdtsc
   107 00000035 48C1E220            <1>  shl rdx, 32
   108 00000039 4801C2              <1>  add rdx, rax
    84                                  
    85                                  ; Print out the message obtaining the present clock time in tics
    86 0000003C B800000000              mov rax, 0
    87 00000041 48BF-                   mov rdi, present_clock_time_msg
    87 00000043 [0000000000000000] 
    88 0000004B 4889D6                  mov rsi, rdx
    89 0000004E E8(00000000)            call printf
    90                                  
    91                                  ; Print out a message instructing the user to input numbers into the array
    92 00000053 B800000000              mov rax, 0
    93 00000058 48BF-                   mov rdi, string_format
    93 0000005A [4101000000000000] 
    94 00000062 48BE-                   mov rsi, array_input_msg
    94 00000064 [2C00000000000000] 
    95 0000006C E8(00000000)            call printf
    96                                  
    97                                  ; Call input_array [long input_array (double array[], long capacity)] to input numbers into the array
    98 00000071 B800000000              mov rax, 0
    99 00000076 48BF-                   mov rdi, the_array
    99 00000078 [4003000000000000] 
   100 00000080 BE40000000              mov rsi, 64
   101 00000085 E8(00000000)            call input_array
   102 0000008A 4989C4                  mov r12, rax ; Save the array's size in r12
   103                                  
   104                                  ; Call the macro to obtain the clock time in tics before finding the sum of the array
   105                                  extract_tics
   104 0000008D BA00000000          <1>  mov rdx, 0
   105 00000092 0FA2                <1>  cpuid
   106 00000094 0F31                <1>  rdtsc
   107 00000096 48C1E220            <1>  shl rdx, 32
   108 0000009A 4801C2              <1>  add rdx, rax
   106 0000009D 4989D5                  mov r13, rdx
   107                                  
   108                                  ; Call sum [double sum(double array[], long size)] to find the sum of the inputted numbers
   109 000000A0 B800000000              mov rax, 0
   110 000000A5 48BF-                   mov rdi, the_array
   110 000000A7 [4003000000000000] 
   111 000000AF 4C89E6                  mov rsi, r12
   112 000000B2 E8(00000000)            call sum
   113                                  
   114                                  ; Call the macro to obtain the clock time in tics after finding the sum of the array to compute the elapsed time of sum in tics
   115                                  extract_tics
   104 000000B7 BA00000000          <1>  mov rdx, 0
   105 000000BC 0FA2                <1>  cpuid
   106 000000BE 0F31                <1>  rdtsc
   107 000000C0 48C1E220            <1>  shl rdx, 32
   108 000000C4 4801C2              <1>  add rdx, rax
   116 000000C7 4989D6                  mov r14, rdx
   117 000000CA 4D29EE                  sub r14, r13
   118 000000CD F2440F10E0              movsd xmm12, xmm0 ; Save the computed sum in xmm12 here to avoid affecting tic count
   119                                  
   120                                  ; Print out a message stating what the computed was
   121 000000D2 B801000000              mov rax, 1
   122 000000D7 48BF-                   mov rdi, sum_msg
   122 000000D9 [8000000000000000] 
   123 000000E1 F2410F10C4              movsd xmm0, xmm12
   124 000000E6 E8(00000000)            call printf
   125                                  
   126                                  ; Print out a message stating the total time it took to perform the addition in tics
   127 000000EB B800000000              mov rax, 0
   128 000000F0 48BF-                   mov rdi, total_time_msg
   128 000000F2 [A300000000000000] 
   129 000000FA 4C89F6                  mov rsi, r14
   130 000000FD E8(00000000)            call printf
   131                                  
   132                                  ; Find the average amount of tics by dividing the total time by the size of the array
   133 00000102 F24D0F2AEC              cvtsi2sd xmm13, r12
   134 00000107 F24D0F2AF6              cvtsi2sd xmm14, r14
   135 0000010C F2450F10FE              movsd xmm15, xmm14 ; Store a copy of the amount of tics into xmm15 for later
   136 00000111 F2450F5EF5              divsd xmm14, xmm13
   137                                  
   138                                  ; Print out a message stating the average amount of tics it took per addition
   139 00000116 B801000000              mov rax, 1
   140 0000011B 48BF-                   mov rdi, average_time_msg
   140 0000011D [E500000000000000] 
   141 00000125 F2410F10C6              movsd xmm0, xmm14
   142 0000012A E8(00000000)            call printf
   143                                  
   144                                  ; Call getfreq [double getfreqy()] to obtain the clockspeed in GHz
   145 0000012F B800000000              mov rax, 0
   146 00000134 E8(00000000)            call getfreq
   147 00000139 F2440F10D8              movsd xmm11, xmm0
   148                                  
   149                                  ; Convert the number of tics into nano-seconds given that GHz = tics/ns. Thereby tics/GHz = ns
   150 0000013E F2450F5EFB              divsd xmm15, xmm11
   151                                  
   152                                  ; Print out a message stating the amount of nanoseconds the tics took
   153 00000143 B801000000              mov rax, 1
   154 00000148 48BF-                   mov rdi, ns_msg
   154 0000014A [1A01000000000000] 
   155 00000152 F2410F10C7              movsd xmm0, xmm15
   156 00000157 E8(00000000)            call printf
   157                                  
   158                                  ; Prepare to send back the amount of nano-seconds the tics took back to driver by pushing it to the stack
   159 0000015C 6A00                    push qword 0
   160 0000015E F2440F113C24            movsd [rsp], xmm15
   161                                  
   162                                  ; Call the macro that restores the non-GPRs/SSEs from the backup_storage_area
   163                                  restore_non_gprs backup_storage_area
    97 00000164 B807000000          <1>  mov rax, 7
    98 00000169 BA00000000          <1>  mov rdx, 0
    99 0000016E 0FAE2C25[00000000]  <1>  xrstor [%1]
   164                                  
   165                                  ; Send back the amount of nano-seconds the tics took
   166 00000176 F20F100424              movsd xmm0, [rsp]
   167 0000017B 58                      pop rax
   168                                  
   169                                  ; Call the macro that restores the GPRs
   170                                  restore_gprs
    71 0000017C 9D                  <1>  popf
    72 0000017D 415F                <1>  pop r15
    73 0000017F 415E                <1>  pop r14
    74 00000181 415D                <1>  pop r13
    75 00000183 415C                <1>  pop r12
    76 00000185 415B                <1>  pop r11
    77 00000187 415A                <1>  pop r10
    78 00000189 4159                <1>  pop r9
    79 0000018B 4158                <1>  pop r8
    80 0000018D 5E                  <1>  pop rsi
    81 0000018E 5F                  <1>  pop rdi
    82 0000018F 5A                  <1>  pop rdx
    83 00000190 59                  <1>  pop rcx
    84 00000191 5B                  <1>  pop rbx
    85 00000192 5D                  <1>  pop rbp
   171                                  
   172 00000193 C3                      ret
