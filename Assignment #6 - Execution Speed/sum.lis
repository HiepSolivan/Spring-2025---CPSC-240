     1                                  ;****************************************************************************************************************************
     2                                  ; Program name: "Execution Speed".  The academic objective is to learn how to utilize the clock.
     3                                  ; The application objective is to measure the average time require to perform one floating point addition: addsd xmm10,xmm11 *
     4                                  ; Copyright (C) 2025  Solivan Hiep                                                                                           *
     5                                  ; This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License  *
     6                                  ; version 3 as published by the Free Software Foundation.                                                                    *
     7                                  ; This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied         *
     8                                  ; warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.     *
     9                                  ; A copy of the GNU General Public License v3 is available here:  <https://www.gnu.org/licenses/>.                           *
    10                                  ;****************************************************************************************************************************
    11                                  
    12                                  
    13                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3=========4=========5=========6=========7**
    14                                  
    15                                  ;Author information
    16                                  ;  Author name: Solivan Hiep
    17                                  ;  Author email: hiepsolivan@csu.fullerton.edu
    18                                  ;  CWID: 8848458756
    19                                  ;  Class: CPSC 240-03 - Class Nbr 13604
    20                                  ;
    21                                  ;Program information
    22                                  ;  Program name: Execution Speed
    23                                  ;  Programming languages: Six modules in X86, two modules in C++, and one in bash
    24                                  ;  Date program began: 2025-Apr-21
    25                                  ;  Date of last update: 2025-Apr-25
    26                                  ;  Files in the program: manager.asm, input_array.asm, isfloat.asm, sum.asm, getfrequency.asm, utilities.inc, clock.cpp, r.sh
    27                                  ;
    28                                  ;Purpose
    29                                  ;  The academic objective is to learn how to utilize the clock.
    30                                  ;  The application objective is to measure the average time require to perform one floating point addition: addsd xmm10,xmm11
    31                                  ;
    32                                  ;This file
    33                                  ;  File name: sum.asm
    34                                  ;  Language: X86-64
    35                                  ;  Max page width: 172 columns
    36                                  ;  Assemble: nasm -f elf64 -l sum.lis -o sum.o sum.asm
    37                                  ;  Page width: 172 columns
    38                                  ;  Optimal print specification: Landscape, 7 points, monospace, 8Â½x11 paper
    39                                  ;  Prototype of this function: double sum(double array[], long size)
    40                                  ;
    41                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3=========4=========5=========6=========7**
    42                                  ;
    43                                  ;===== Begin code area ====================================================================================================================================================
    44                                  
    45                                  ; Declarations
    46                                  extern printf
    47                                  
    48                                  global sum
    49                                  
    50                                  ; Declare initialized arrays
    51                                  segment .data
    52                                  
    53                                  ; Declare uninitialized arrays
    54                                  segment .bss
    55                                  align 64
    56 00000000 <res 340h>              backup_storage_area resb 832
    57                                  
    58                                  segment .text
    59                                  sum:
    60                                  
    61                                  ; Backup the GPRs
    62 00000000 55                      push rbp
    63 00000001 4889E5                  mov rbp, rsp
    64 00000004 53                      push rbx
    65 00000005 51                      push rcx
    66 00000006 52                      push rdx
    67 00000007 57                      push rdi
    68 00000008 56                      push rsi
    69 00000009 4150                    push r8
    70 0000000B 4151                    push r9
    71 0000000D 4152                    push r10
    72 0000000F 4153                    push r11
    73 00000011 4154                    push r12
    74 00000013 4155                    push r13
    75 00000015 4156                    push r14
    76 00000017 4157                    push r15
    77 00000019 9C                      pushf
    78                                  
    79                                  ; Backup other registers/sse registers
    80 0000001A B807000000              mov rax, 7
    81 0000001F BA00000000              mov rdx, 0
    82 00000024 0FAE2425[00000000]      xsave [backup_storage_area]
    83                                  
    84                                  ; Move the arguments received (the address to the array + array size) into non-volatile registers r12 and r13 to affect the actual array + future use in logic
    85 0000002C 4989FC                  mov r12, rdi ; The array
    86 0000002F 4989F5                  mov r13, rsi ; The array's size
    87                                  
    88                                  ; Maintain a counter for the array using the non-volatile register r14 to ensure no over-indexing
    89 00000032 4D31F6                  xor r14, r14 ; Comparing r14 to itself via xor sets r14 to 0
    90                                  
    91                                  ; Kick of the main loop to find the sum of all the elements in the array
    92                                  top_of_loop:
    93                                  
    94                                  ; Check for over-indexing by determining if r14 >= r13. If so, exit. Otherwise, continue
    95 00000035 4D39EE                  cmp r14, r13
    96 00000038 7D10                    jge out_of_loop
    97                                  
    98                                  ; Take the element at the counter [r14] and add it to the to a non-volatile register so operations are maintained
    99 0000003A F2470F1034F4            movsd xmm14, [r12 + r14 * 8]
   100 00000040 F2450F58FE              addsd xmm15, xmm14
   101                                  
   102                                  ; Increment the counter [r14] by 1 and jump back to the top of the loop
   103 00000045 49FFC6                  inc r14
   104 00000048 EBEB                    jmp top_of_loop
   105                                  ; End of main loop to print out each element in the array
   106                                  
   107                                  ; Exit the main loop and complete the program
   108                                  out_of_loop:
   109                                  
   110                                  ; Move the sum to the stack before restoring SSEs to maintain the value
   111 0000004A B800000000              mov rax, 0
   112 0000004F 6A00                    push qword 0
   113 00000051 F2440F113C24            movsd [rsp], xmm15
   114                                  
   115                                  ; Restore the values to non-GPRs/sse registers
   116 00000057 B807000000              mov rax, 7
   117 0000005C BA00000000              mov rdx, 0
   118 00000061 0FAE2C25[00000000]      xrstor [backup_storage_area]
   119                                  
   120                                  ; Send back the sum stored in rsp
   121 00000069 F20F100424              movsd xmm0, [rsp]
   122 0000006E 58                      pop rax
   123                                  
   124                                  ; Restore the GPRs
   125 0000006F 9D                      popf
   126 00000070 415F                    pop r15
   127 00000072 415E                    pop r14
   128 00000074 415D                    pop r13
   129 00000076 415C                    pop r12
   130 00000078 415B                    pop r11
   131 0000007A 415A                    pop r10
   132 0000007C 4159                    pop r9
   133 0000007E 4158                    pop r8
   134 00000080 5E                      pop rsi
   135 00000081 5F                      pop rdi
   136 00000082 5A                      pop rdx
   137 00000083 59                      pop rcx
   138 00000084 5B                      pop rbx
   139 00000085 5D                      pop rbp   ;Restore rbp to the base of the activation record of the caller program
   140 00000086 C3                      ret
   141                                  ;End of the function sum ====================================================================
