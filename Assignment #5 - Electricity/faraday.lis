     1                                  ;****************************************************************************************************************************
     2                                  ; Program name: "Electricity".  The intent of this program is to compute missing electrical information from            *
     3                                  ; user-inputted information. The educational purpose is to provide me with experience in pure assembly programming.          *                                                         *
     4                                  ; Copyright (C) 2025  Solivan Hiep                                                                                           *
     5                                  ; This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License  *
     6                                  ; version 3 as published by the Free Software Foundation.                                                                    *
     7                                  ; This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied         *
     8                                  ; warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.     *
     9                                  ; A copy of the GNU General Public License v3 is available here:  <https://www.gnu.org/licenses/>.                           *
    10                                  ;****************************************************************************************************************************
    11                                  
    12                                  
    13                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3=========4=========5=========6=========7**
    14                                  
    15                                  ;Author information
    16                                  ;  Author name: Solivan Hiep
    17                                  ;  Author email: hiepsolivan@csu.fullerton.edu
    18                                  ;  CWID: 8848458756
    19                                  ;  Class: CPSC 240-03 - Class Nbr 13604
    20                                  ;
    21                                  ;Program information
    22                                  ;  Program name: Electricity
    23                                  ;  Programming languages: Ten modules in X86, one in bash
    24                                  ;  Date program began: 2025-Apr-04
    25                                  ;  Date of last update: 2025-Apr-12
    26                                  ;  Files in the program: faraday.asm, edison.asm, input_array.asm, atof.asm, isfloat.asm tesla.asm, ftoa.asm, syscall_fgets.asm, syscall_strlen.asm acdc.inc, r.sh
    27                                  ;
    28                                  ;Purpose
    29                                  ;  The intent of this program is to compute missing electrical information from
    30                                  ;  user-inputted information. The educational purpose is to provide me with experience in pure assembly programming.
    31                                  ;
    32                                  ;This file
    33                                  ;  File name: faraday.asm
    34                                  ;  Language: X86-64
    35                                  ;  Development Platform: Windows 11 Enterprise Ver. 24H2. Intel(R) Core(TM) i3-8145U CPU @ 2.10GHz 2.30 GHz Processor. Running on Ubuntu 22.04.5 LTS.
    36                                  ;  Max page width: 172 columns
    37                                  ;  Assemble: nasm -f elf64 -l faraday.lis -o faraday.o faraday.asm
    38                                  ;  Assemble (debug in GDB): nasm -f elf64 -gdwarf -l faraday.lis -o faraday.o faraday.asm
    39                                  ;  Page width: 172 columns
    40                                  ;  Optimal print specification: Landscape, 7 points, monospace, 8Â½x11 paper
    41                                  ;  Prototype of this function: int faraday()
    42                                  ;
    43                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3=========4=========5=========6=========7**
    44                                  ;
    45                                  ;===== Begin code area ====================================================================================================================================================
    46                                  
    47                                  ; Declarations
    48                                  global _start ; Global declaration for the linker
    49                                  extern edison
    50                                  extern syscall_strlen
    51                                  
    52                                  SYS_WRITE equ 1
    53                                  SYS_EXIT equ 60
    54                                  STDOUT equ 1
    55                                  
    56                                  ; Declare initialized arrays
    57                                  segment .data
    58 00000000 0A0A0A0A0A0A0A0A        newline db 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa           ;Declare an array of 8 bytes where each byte is initialized with ascii value 10 [A] (newline)
    59                                  
    60 00000008 57656C636F6D652074-     welcome_msg db "Welcome to Electricity brought to you by Solivan Hiep."
    60 00000011 6F20456C6563747269-
    60 0000001A 636974792062726F75-
    60 00000023 67687420746F20796F-
    60 0000002C 7520627920536F6C69-
    60 00000035 76616E20486965702E 
    61 0000003E 546869732070726F67-     program_desc_msg db "This program will compute the resistance current flow in your direct circuit."
    61 00000047 72616D2077696C6C20-
    61 00000050 636F6D707574652074-
    61 00000059 686520726573697374-
    61 00000062 616E63652063757272-
    61 0000006B 656E7420666C6F7720-
    61 00000074 696E20796F75722064-
    61 0000007D 697265637420636972-
    61 00000086 637569742E         
    62 0000008B 546865206472697665-     number_received_msg db "The driver received this number  "
    62 00000094 722072656365697665-
    62 0000009D 642074686973206E75-
    62 000000A6 6D6265722020       
    63 000000AC 2C20616E642077696C-     next_semester_msg db ", and will keep it until next semester."
    63 000000B5 6C206B656570206974-
    63 000000BE 20756E74696C206E65-
    63 000000C7 78742073656D657374-
    63 000000D0 65722E             
    64 000000D3 41207A65726F207769-     zero_return_msg db "A zero will be returned to the Operating System"
    64 000000DC 6C6C20626520726574-
    64 000000E5 75726E656420746F20-
    64 000000EE 746865204F70657261-
    64 000000F7 74696E672053797374-
    64 00000100 656D               
    65                                  
    66                                  ; Declare uninitialized arrays
    67                                  segment .bss
    68                                  
    69                                  segment .text
    70                                  _start:
    71                                  ; NOTE: We do not need to backup our registers because we have no caller
    72                                  
    73                                  ; Print out the welcome message introducing the program and its author
    74 00000000 B801000000              mov rax, SYS_WRITE
    75 00000005 BF01000000              mov rdi, STDOUT
    76 0000000A 48BE-                   mov rsi, welcome_msg
    76 0000000C [0800000000000000] 
    77 00000014 BA36000000              mov rdx, 54 ; Amount of characters to be read
    78 00000019 0F05                    syscall
    79                                  
    80                                  ; Print out a new line
    81 0000001B B801000000              mov rax, SYS_WRITE
    82 00000020 BF01000000              mov rdi, STDOUT
    83 00000025 48BE-                   mov rsi, newline
    83 00000027 [0000000000000000] 
    84 0000002F BA01000000              mov rdx, 1
    85 00000034 0F05                    syscall
    86                                  
    87                                  ; Print out the message explaining what the program does
    88 00000036 B801000000              mov rax, SYS_WRITE
    89 0000003B BF01000000              mov rdi, STDOUT
    90 00000040 48BE-                   mov rsi, program_desc_msg
    90 00000042 [3E00000000000000] 
    91 0000004A BA4D000000              mov rdx, 77
    92 0000004F 0F05                    syscall
    93                                  
    94                                  ; Print out a new line
    95 00000051 B801000000              mov rax, SYS_WRITE
    96 00000056 BF01000000              mov rdi, STDOUT
    97 0000005B 48BE-                   mov rsi, newline
    97 0000005D [0000000000000000] 
    98 00000065 BA01000000              mov rdx, 1
    99 0000006A 0F05                    syscall
   100                                  
   101                                  ; Print out another new line
   102 0000006C B801000000              mov rax, SYS_WRITE
   103 00000071 BF01000000              mov rdi, STDOUT
   104 00000076 48BE-                   mov rsi, newline
   104 00000078 [0000000000000000] 
   105 00000080 BA01000000              mov rdx, 1
   106 00000085 0F05                    syscall
   107                                  
   108                                  ; Call edison [double edison()] to obtain the current in a circuit given the resistance in ohms on three sub-circuits
   109 00000087 B800000000              mov rax, 0
   110 0000008C E8(00000000)            call edison
   111 00000091 4989C4                  mov r12, rax
   112                                  
   113                                  ; Print out a message stating what number was received from edison
   114 00000094 B801000000              mov rax, SYS_WRITE
   115 00000099 BF01000000              mov rdi, STDOUT
   116 0000009E 48BE-                   mov rsi, number_received_msg
   116 000000A0 [8B00000000000000] 
   117 000000A8 BA21000000              mov rdx, 33
   118 000000AD 0F05                    syscall
   119                                  
   120                                  ; Call syscall_strlen [long syscall_strlen(char string[])] to obtain the length of the current string for use in printing
   121 000000AF B800000000              mov rax, 0
   122 000000B4 4C89E7                  mov rdi, r12
   123 000000B7 E8(00000000)            call syscall_strlen
   124 000000BC 4989C5                  mov r13, rax
   125                                  
   126                                  ; Print out the number received
   127 000000BF B801000000              mov rax, SYS_WRITE
   128 000000C4 BF01000000              mov rdi, STDOUT
   129 000000C9 4C89E6                  mov rsi, r12
   130 000000CC 4C89EA                  mov rdx, r13
   131 000000CF 0F05                    syscall
   132                                  
   133                                  ; Print out a message stating that the number will be kept until next semester
   134 000000D1 B801000000              mov rax, SYS_WRITE
   135 000000D6 BF01000000              mov rdi, STDOUT
   136 000000DB 48BE-                   mov rsi, next_semester_msg
   136 000000DD [AC00000000000000] 
   137 000000E5 BA27000000              mov rdx, 39
   138 000000EA 0F05                    syscall
   139                                  
   140                                  ; Print out a new line
   141 000000EC B801000000              mov rax, SYS_WRITE
   142 000000F1 BF01000000              mov rdi, STDOUT
   143 000000F6 48BE-                   mov rsi, newline
   143 000000F8 [0000000000000000] 
   144 00000100 BA01000000              mov rdx, 1
   145 00000105 0F05                    syscall
   146                                  
   147                                  ; Print out the message stating that the driver will return a 0
   148 00000107 B801000000              mov rax, SYS_WRITE
   149 0000010C BF01000000              mov rdi, STDOUT
   150 00000111 48BE-                   mov rsi, zero_return_msg
   150 00000113 [D300000000000000] 
   151 0000011B BA2F000000              mov rdx, 47
   152 00000120 0F05                    syscall
   153                                  
   154                                  ; Print out a new line
   155 00000122 B801000000              mov rax, SYS_WRITE
   156 00000127 BF01000000              mov rdi, STDOUT
   157 0000012C 48BE-                   mov rsi, newline
   157 0000012E [0000000000000000] 
   158 00000136 BA01000000              mov rdx, 1
   159 0000013B 0F05                    syscall
   160                                  
   161                                  ; Return and exit the program with error code 0
   162 0000013D B83C000000              mov rax, SYS_EXIT
   163 00000142 BF00000000              mov rdi, 0
   164 00000147 0F05                    syscall
