     1                                  ;****************************************************************************************************************************
     2                                  ; Program name: "Huron's Triangle".  The intent of this program is to compute the area of any triangle where the lengths of the
     3                                  ; three sides is known using Huron's formula. The educational purpose is to reinforce my skill of using a few techniques from
     4                                  ; the past such as data validation and parameter passing and use macros in this program to hopefully understand how to use   *
     5                                  ; macros in other situations                                                                                                 *
     6                                  ; Copyright (C) 2025  Solivan Hiep                                                                                           *
     7                                  ; This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License  *
     8                                  ; version 3 as published by the Free Software Foundation.                                                                    *
     9                                  ; This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied         *
    10                                  ; warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.     *
    11                                  ; A copy of the GNU General Public License v3 is available here:  <https://www.gnu.org/licenses/>.                           *
    12                                  ;****************************************************************************************************************************
    13                                  
    14                                  
    15                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3=========4=========5=========6=========7**
    16                                  
    17                                  ;Author information
    18                                  ;  Author name: Solivan Hiep
    19                                  ;  Author email: hiepsolivan@csu.fullerton.edu
    20                                  ;  CWID: 8848458756
    21                                  ;  Class: CPSC 240-03 - Class Nbr 13604
    22                                  ;
    23                                  ;Program information
    24                                  ;  Program name: Huron's Triangle
    25                                  ;  Programming languages: Five modules in X86, one module in C++, and one in bash
    26                                  ;  Date program began: 2025-Feb-24
    27                                  ;  Date of last update: 2025-Mar-05
    28                                  ;  Files in the program: manager.asm, istriangle.asm, isfloat.asm, huron.asm, triangle.inc, main.c, r.sh
    29                                  ;
    30                                  ;Purpose
    31                                  ;  The intent of this program is to compute the area of any triangle where the lengths of the
    32                                  ;  three sides is known using Huron's formula.
    33                                  ;  The educational purpose is to reinforce my skill of using a few techniques from the past such as data validation
    34                                  ;  and parameter passing as well as use macros in this program to hopefully understand how to use
    35                                  ;  macros in other situations
    36                                  ;
    37                                  ;This file
    38                                  ;  File name: istriangle.asm
    39                                  ;  Language: X86-64
    40                                  ;  Development Platform: Windows 11 Enterprise Ver. 24H2. Intel(R) Core(TM) i3-8145U CPU @ 2.10GHz 2.30 GHz Processor. Running on Ubuntu 22.04.5 LTS.
    41                                  ;  Max page width: 172 columns
    42                                  ;  Assemble: nasm -f elf64 -l istriangle.lis -o istriangle.o istriangle.asm
    43                                  ;  Assemble (debug in GDB): nasm -f elf64 -gdwarf -l manager.lis -o manager.o manager.asm
    44                                  ;  Page width: 172 columns
    45                                  ;  Optimal print specification: Landscape, 7 points, monospace, 8Â½x11 paper
    46                                  ;  Prototype of this function: bool istriangle(double array[], long size)
    47                                  ;
    48                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3=========4=========5=========6=========7**
    49                                  ;
    50                                  ;===== Begin code area ====================================================================================================================================================
    51                                  
    52                                  ; Declarations
    53                                  %include "triangle.inc"
    54                              <1> ;=====Declarations =======================================================================
    55                              <1> ;These declarations are global to all the macros in this include file "triangle.inc".
    56 00000000 546869732070726F67- <1> courtesy_msg db "This program is brought to you as a courtesy of", 10, 0
    56 00000009 72616D206973206272- <1>
    56 00000012 6F7567687420746F20- <1>
    56 0000001B 796F75206173206120- <1>
    56 00000024 636F75727465737920- <1>
    56 0000002D 6F660A00            <1>
    57 00000031 417574686F723A2053- <1> author_msg db "Author: Solivan Hiep", 10, 0
    57 0000003A 6F6C6976616E204869- <1>
    57 00000043 65700A00            <1>
    58 00000047 437769643A20383834- <1> cwid_msg db "Cwid: 884-845-876", 10, 0
    58 00000050 2D3834352D3837360A- <1>
    58 00000059 00                  <1>
    59 0000005A 456D61696C3A206869- <1> email_msg db "Email: hiepsolivan@csu.fullerton.edu", 10, 10, 0
    59 00000063 6570736F6C6976616E- <1>
    59 0000006C 406373752E66756C6C- <1>
    59 00000075 6572746F6E2E656475- <1>
    59 0000007E 0A0A00              <1>
    60                              <1> 
    61                              <1> ; Macro that backs up the GPRs
    62                              <1> %macro backup_gprs 0
    63                              <1>   push rbp
    64                              <1>   mov rbp, rsp
    65                              <1>   push rbx
    66                              <1>   push rcx
    67                              <1>   push rdx
    68                              <1>   push rdi
    69                              <1>   push rsi
    70                              <1>   push r8
    71                              <1>   push r9
    72                              <1>   push r10
    73                              <1>   push r11
    74                              <1>   push r12
    75                              <1>   push r13
    76                              <1>   push r14
    77                              <1>   push r15
    78                              <1>   pushf
    79                              <1> %endmacro
    80                              <1> 
    81                              <1> ; Macro that restores the GPRs
    82                              <1> %macro restore_gprs 0
    83                              <1>   popf
    84                              <1>   pop r15
    85                              <1>   pop r14
    86                              <1>   pop r13
    87                              <1>   pop r12
    88                              <1>   pop r11
    89                              <1>   pop r10
    90                              <1>   pop r9
    91                              <1>   pop r8
    92                              <1>   pop rsi
    93                              <1>   pop rdi
    94                              <1>   pop rdx
    95                              <1>   pop rcx
    96                              <1>   pop rbx
    97                              <1>   pop rbp
    98                              <1> %endmacro
    99                              <1> 
   100                              <1> ; Macro that back ups non-GPRs/SSEs to an array stored in parameter %1
   101                              <1> %macro backup_non_gprs 1
   102                              <1>   mov rax, 7
   103                              <1>   mov rdx, 0
   104                              <1>   xsave [%1]
   105                              <1> %endmacro
   106                              <1> 
   107                              <1> ; Macro that restores the non-GPRs/SSEs in storage array of parameter %1
   108                              <1> %macro restore_non_gprs 1
   109                              <1>   mov rax, 7
   110                              <1>   mov rdx, 0
   111                              <1>   xrstor [%1]
   112                              <1> %endmacro
   113                              <1> 
   114                              <1> ; Macro that introduces who the program is courtesy of
   115                              <1> %macro display_info 0
   116                              <1>   mov rax, 0
   117                              <1>   mov rdi, string_format ; This string format was already declared in manager.asm, so we don't need to redefine it
   118                              <1>   mov rsi, courtesy_msg
   119                              <1>   call printf
   120                              <1> %endmacro
   121                              <1> 
   122                              <1> ; Macro that prints out the author's name
   123                              <1> %macro display_author_name 0
   124                              <1>   mov rax, 0
   125                              <1>   mov rdi, string_format
   126                              <1>   mov rsi, author_msg
   127                              <1>   call printf
   128                              <1> %endmacro
   129                              <1> 
   130                              <1> ; Macro that prints out the author's CWID
   131                              <1> %macro display_cwid 0
   132                              <1>   mov rax, 0
   133                              <1>   mov rdi, string_format
   134                              <1>   mov rsi, cwid_msg
   135                              <1>   call printf
   136                              <1> %endmacro
   137                              <1> 
   138                              <1> ; Macro that prints out the author's email
   139                              <1> %macro display_email 0
   140                              <1>   mov rax, 0
   141                              <1>   mov rdi, string_format
   142                              <1>   mov rsi, email_msg
   143                              <1>   call printf
   144                              <1> %endmacro
   145                              <1> 
   146                              <1> ; Macro that checks if the sum of the first two sides is greater than the third
   147                              <1> %macro check_two_sides_greater 4
   148                              <1>   ; %1 = the array of sides
   149                              <1>   ; %2 = index of first side [from 0]
   150                              <1>   ; %3 = index of second side
   151                              <1>   ; %4 = index of third side
   152                              <1>   mov r12, %1
   153                              <1>   mov r13, %2
   154                              <1>   mov r14, %3
   155                              <1>   mov r15, %4
   156                              <1>   movsd xmm1, qword[r12 + r13 * 8]
   157                              <1>   movsd xmm2, qword[r12 + r14 * 8]
   158                              <1>   addsd xmm1, xmm2
   159                              <1>   movsd xmm3, qword[r12 + r15 * 8]
   160                              <1>   ucomisd xmm1, xmm3 ; Unordered Compare Scalar Double Precision Floating-Point Values (i.e comparing SSEs)
   161                              <1> %endmacro
    54                                  global istriangle
    55                                  
    56                                  true equ 1
    57                                  false equ 0
    58                                  
    59                                  ; Declare initialized arrays
    60                                  segment .data
    61                                  
    62                                  ; Declare uninitialized arrays
    63                                  segment .bss
    64                                  align 64
    65 00000000 <res 340h>              backup_storage_area resb 832
    66                                  
    67                                  segment .text
    68                                  istriangle:
    69                                  
    70                                  ; Call the macro to back-up the GPRs
    71                                  backup_gprs
    63 00000081 55                  <1>  push rbp
    64 00000082 4889E5              <1>  mov rbp, rsp
    65 00000085 53                  <1>  push rbx
    66 00000086 51                  <1>  push rcx
    67 00000087 52                  <1>  push rdx
    68 00000088 57                  <1>  push rdi
    69 00000089 56                  <1>  push rsi
    70 0000008A 4150                <1>  push r8
    71 0000008C 4151                <1>  push r9
    72 0000008E 4152                <1>  push r10
    73 00000090 4153                <1>  push r11
    74 00000092 4154                <1>  push r12
    75 00000094 4155                <1>  push r13
    76 00000096 4156                <1>  push r14
    77 00000098 4157                <1>  push r15
    78 0000009A 9C                  <1>  pushf
    72                                  
    73                                  ; Call the macro to back-up the non-GPRs/SSEs into backup_storage_area
    74                                  backup_non_gprs backup_storage_area
   102 0000009B B807000000          <1>  mov rax, 7
   103 000000A0 BA00000000          <1>  mov rdx, 0
   104 000000A5 0FAE2425[00000000]  <1>  xsave [%1]
    75                                  
    76                                  ; Move the arguments received (the address to the array + the array's size) into the non-volatile registers r12 and 13 for sustained use in logic
    77 000000AD 4989FC                  mov r12, rdi
    78 000000B0 4989F5                  mov r13, rsi
    79                                  
    80                                  ; Check if there are only three sides in the array. If so, continue. If not, the sides do not make a valid triangle.
    81 000000B3 4983FD03                cmp r13, 3
    82 000000B7 0F85B5000000            jne invalid_triangle
    83                                  
    84                                  ; Maintain a counter in r14 to prevent over-indexing
    85 000000BD 4D31F6                  xor r14, r14 ; Comparing r14 to itself sets r14 to 0
    86                                  
    87                                  ; Start the loop of checking the triangle's sides to see if they are all positive
    88                                  positive_sides:
    89                                  
    90                                  ; Check for over-indexing by determining if r14 >= r13. If so, exit with a valid triangle. Otherwise, continue.
    91 000000C0 4D39EE                  cmp r14, r13
    92 000000C3 7D10                    jge valid_sides ; The triangle's is valid because it passed the previous iteration of the 3rd side
    93                                  
    94                                  ; Get the side in the array [r12] at the counter [r14] and compare it to 0. If the side is <= 0, invalid triangle. Otherwise, continue looping
    95 000000C5 4B833CF400              cmp qword[r12 + r14 * 8], 0
    96 000000CA 0F8EA2000000            jle invalid_triangle
    97                                  
    98                                  ; Increment the counter by one and restart the main loop if everything goes well
    99 000000D0 49FFC6                  inc r14
   100 000000D3 EBEB                    jmp positive_sides
   101                                  ; End of main loop of checking the triangle's sides to see if they are all positive
   102                                  
   103                                  ; Start checking the triangle's sides to see if they form a valid triangle (i.e the sum of any two sides is > the third)
   104                                  valid_sides:
   105                                  
   106                                  ; Check if side 1 + side 2 > side 3
   107                                  check_two_sides_greater r12, 0, 1, 2
   148                              <1> 
   149                              <1> 
   150                              <1> 
   151                              <1> 
   152 000000D5 4D89E4              <1>  mov r12, %1
   153 000000D8 41BD00000000        <1>  mov r13, %2
   154 000000DE 41BE01000000        <1>  mov r14, %3
   155 000000E4 41BF02000000        <1>  mov r15, %4
   156 000000EA F2430F100CEC        <1>  movsd xmm1, qword[r12 + r13 * 8]
   157 000000F0 F2430F1014F4        <1>  movsd xmm2, qword[r12 + r14 * 8]
   158 000000F6 F20F58CA            <1>  addsd xmm1, xmm2
   159 000000FA F2430F101CFC        <1>  movsd xmm3, qword[r12 + r15 * 8]
   160 00000100 660F2ECB            <1>  ucomisd xmm1, xmm3
   108 00000104 766C                    jbe invalid_triangle ; Here, we use jbe over jle because we are working with IEEE floats
   109                                  
   110                                  ; Check if side 2 + side 3 > side 1
   111                                  check_two_sides_greater r12, 1, 2, 0
   148                              <1> 
   149                              <1> 
   150                              <1> 
   151                              <1> 
   152 00000106 4D89E4              <1>  mov r12, %1
   153 00000109 41BD01000000        <1>  mov r13, %2
   154 0000010F 41BE02000000        <1>  mov r14, %3
   155 00000115 41BF00000000        <1>  mov r15, %4
   156 0000011B F2430F100CEC        <1>  movsd xmm1, qword[r12 + r13 * 8]
   157 00000121 F2430F1014F4        <1>  movsd xmm2, qword[r12 + r14 * 8]
   158 00000127 F20F58CA            <1>  addsd xmm1, xmm2
   159 0000012B F2430F101CFC        <1>  movsd xmm3, qword[r12 + r15 * 8]
   160 00000131 660F2ECB            <1>  ucomisd xmm1, xmm3
   112 00000135 763B                    jbe invalid_triangle
   113                                  
   114                                  ; Check if side 3 + side 1 > side 2
   115                                  check_two_sides_greater r12, 2, 0, 1
   148                              <1> 
   149                              <1> 
   150                              <1> 
   151                              <1> 
   152 00000137 4D89E4              <1>  mov r12, %1
   153 0000013A 41BD02000000        <1>  mov r13, %2
   154 00000140 41BE00000000        <1>  mov r14, %3
   155 00000146 41BF01000000        <1>  mov r15, %4
   156 0000014C F2430F100CEC        <1>  movsd xmm1, qword[r12 + r13 * 8]
   157 00000152 F2430F1014F4        <1>  movsd xmm2, qword[r12 + r14 * 8]
   158 00000158 F20F58CA            <1>  addsd xmm1, xmm2
   159 0000015C F2430F101CFC        <1>  movsd xmm3, qword[r12 + r15 * 8]
   160 00000162 660F2ECB            <1>  ucomisd xmm1, xmm3
   116 00000166 760A                    jbe invalid_triangle
   117                                  
   118                                  ; If all triangle sides are valid, you have a valid triangle
   119 00000168 EB00                    jmp valid_triangle
   120                                  ; End of valid_sides to check if the sides form a valid triangle
   121                                  
   122                                  ;; Jump here if the sides of the triangle is valid
   123                                  valid_triangle:
   124                                  ; Set r15 to the results of is_triangle [true] then jump out of the main loop
   125 0000016A 41BF01000000            mov r15, true
   126 00000170 EB08                    jmp end_of_loop
   127                                  ; End of valid_triangle to set r15 to the results of is_triangle [true]
   128                                  
   129                                  ;; Jump here if the sides of the triangle are invalid
   130                                  invalid_triangle:
   131                                  ; Set r15 to the results of is_triangle [false] then jump out of the main loop
   132 00000172 41BF00000000            mov r15, false
   133 00000178 EB00                    jmp end_of_loop
   134                                  ; End of invalid_triangle to set r15 to the results of is_triangle [false]
   135                                  
   136                                  ; Exit the main loop
   137                                  end_of_loop:
   138                                  
   139                                  ; Restore the non-GPRs/SSEs from backup_storage_area
   140                                  restore_non_gprs backup_storage_area
   109 0000017A B807000000          <1>  mov rax, 7
   110 0000017F BA00000000          <1>  mov rdx, 0
   111 00000184 0FAE2C25[00000000]  <1>  xrstor [%1]
   141                                  
   142                                  ; Send back true/false stored in r15 back to caller
   143 0000018C 4C89F8                  mov rax, r15
   144                                  
   145                                  ; Restore the GPRs
   146                                  restore_gprs
    83 0000018F 9D                  <1>  popf
    84 00000190 415F                <1>  pop r15
    85 00000192 415E                <1>  pop r14
    86 00000194 415D                <1>  pop r13
    87 00000196 415C                <1>  pop r12
    88 00000198 415B                <1>  pop r11
    89 0000019A 415A                <1>  pop r10
    90 0000019C 4159                <1>  pop r9
    91 0000019E 4158                <1>  pop r8
    92 000001A0 5E                  <1>  pop rsi
    93 000001A1 5F                  <1>  pop rdi
    94 000001A2 5A                  <1>  pop rdx
    95 000001A3 59                  <1>  pop rcx
    96 000001A4 5B                  <1>  pop rbx
    97 000001A5 5D                  <1>  pop rbp
   147                                  
   148 000001A6 C3                      ret
