     1                                  ;****************************************************************************************************************************
     2                                  ; Program name: "Non-deterministic random numbers".  The intent of this program is to generate up to 100 random number using *
     3                                  ; the non-deterministic random number generator found inside of modern X86 microprocessors.                                  *
     4                                  ; Copyright (C) 2025  Solivan Hiep                                                                                           *
     5                                  ; This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License  *
     6                                  ; version 3 as published by the Free Software Foundation.                                                                    *
     7                                  ; This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied         *
     8                                  ; warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.     *
     9                                  ; A copy of the GNU General Public License v3 is available here:  <https://www.gnu.org/licenses/>.                           *
    10                                  ;****************************************************************************************************************************
    11                                  
    12                                  
    13                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3=========4=========5=========6=========7**
    14                                  
    15                                  ;Author information
    16                                  ;  Author name: Solivan Hiep
    17                                  ;  Author email: hiepsolivan@csu.fullerton.edu
    18                                  ;  CWID: 8848458756
    19                                  ;  Class: CPSC 240-03 - Class Nbr 13604
    20                                  ;
    21                                  ;Program information
    22                                  ;  Program name: Non-deterministic Random Numbers
    23                                  ;  Programming languages: Five modules in X86, two modules in C++, and one in bash
    24                                  ;  Date program began: 2025-Mar-24
    25                                  ;  Date of last update: 2025-Mar-27
    26                                  ;  Files in the program: executive.asm, fill_random_array.asm, isnan.asm, normalize.asm, show_array.asm, main.cpp, sort.cpp, r.sh
    27                                  ;
    28                                  ;Purpose
    29                                  ;  The intent of this program is to generate up to 100 random numbers using
    30                                  ;  the non-deterministic random number generator found inside of modern X86 microprocessors.
    31                                  ;
    32                                  ;This file
    33                                  ;  File name: fill_random_array.asm
    34                                  ;  Language: X86-64
    35                                  ;  Development Platform: Windows 11 Enterprise Ver. 24H2. Intel(R) Core(TM) i3-8145U CPU @ 2.10GHz 2.30 GHz Processor. Running on Ubuntu 22.04.5 LTS.
    36                                  ;  Max page width: 172 columns
    37                                  ;  Assemble: nasm -f elf64 -l fill_random_array.lis -o fill_random_array.o fill_random_array.asm
    38                                  ;  Assemble (debug in GDB): nasm -f elf64 -gdwarf -l fill_random_array.lis -o fill_random_array.o fill_random_array.asm
    39                                  ;  Page width: 172 columns
    40                                  ;  Optimal print specification: Landscape, 7 points, monospace, 8Â½x11 paper
    41                                  ;  Prototype of this function: void fill_random_array(double array [], int size)
    42                                  ;
    43                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3=========4=========5=========6=========7**
    44                                  ;
    45                                  ;===== Begin code area ====================================================================================================================================================
    46                                  
    47                                  ; Declarations
    48                                  %include "utilities.inc"
    49                              <1> ; Macro that backs up the GPRs
    50                              <1> %macro backup_gprs 0
    51                              <1>   push rbp
    52                              <1>   mov rbp, rsp
    53                              <1>   push rbx
    54                              <1>   push rcx
    55                              <1>   push rdx
    56                              <1>   push rdi
    57                              <1>   push rsi
    58                              <1>   push r8
    59                              <1>   push r9
    60                              <1>   push r10
    61                              <1>   push r11
    62                              <1>   push r12
    63                              <1>   push r13
    64                              <1>   push r14
    65                              <1>   push r15
    66                              <1>   pushf
    67                              <1> %endmacro
    68                              <1> 
    69                              <1> ; Macro that restores the GPRs
    70                              <1> %macro restore_gprs 0
    71                              <1>   popf
    72                              <1>   pop r15
    73                              <1>   pop r14
    74                              <1>   pop r13
    75                              <1>   pop r12
    76                              <1>   pop r11
    77                              <1>   pop r10
    78                              <1>   pop r9
    79                              <1>   pop r8
    80                              <1>   pop rsi
    81                              <1>   pop rdi
    82                              <1>   pop rdx
    83                              <1>   pop rcx
    84                              <1>   pop rbx
    85                              <1>   pop rbp
    86                              <1> %endmacro
    87                              <1> 
    88                              <1> ; Macro that back ups non-GPRs/SSEs to an array stored in parameter %1
    89                              <1> %macro backup_non_gprs 1
    90                              <1>   mov rax, 7
    91                              <1>   mov rdx, 0
    92                              <1>   xsave [%1]
    93                              <1> %endmacro
    94                              <1> 
    95                              <1> ; Macro that restores the non-GPRs/SSEs in storage array of parameter %1
    96                              <1> %macro restore_non_gprs 1
    97                              <1>   mov rax, 7
    98                              <1>   mov rdx, 0
    99                              <1>   xrstor [%1]
   100                              <1> %endmacro
   101                              <1> 
   102                              <1> ; Macro that removes the new line from a string input in parameter %1
   103                              <1> %macro remove_new_line 1
   104                              <1>   mov r12, %1
   105                              <1>   mov rax, 0
   106                              <1>   mov rdi, r12
   107                              <1>   call strlen
   108                              <1>   mov [r12 + rax - 1], byte 0
   109                              <1> %endmacro
    49                                  extern isnan
    50                                  
    51                                  global fill_random_array
    52                                  
    53                                  ; Declare initialized arrays
    54                                  segment .data
    55                                  
    56                                  ; Declare uninitialized arrays
    57                                  segment .bss
    58                                  align 64
    59 00000000 <res 340h>              backup_storage_area resb 832
    60                                  
    61                                  segment .text
    62                                  fill_random_array:
    63                                  
    64                                  ; Call the macro to back up the GPRs
    65                                  backup_gprs
    51 00000000 55                  <1>  push rbp
    52 00000001 4889E5              <1>  mov rbp, rsp
    53 00000004 53                  <1>  push rbx
    54 00000005 51                  <1>  push rcx
    55 00000006 52                  <1>  push rdx
    56 00000007 57                  <1>  push rdi
    57 00000008 56                  <1>  push rsi
    58 00000009 4150                <1>  push r8
    59 0000000B 4151                <1>  push r9
    60 0000000D 4152                <1>  push r10
    61 0000000F 4153                <1>  push r11
    62 00000011 4154                <1>  push r12
    63 00000013 4155                <1>  push r13
    64 00000015 4156                <1>  push r14
    65 00000017 4157                <1>  push r15
    66 00000019 9C                  <1>  pushf
    66                                  
    67                                  ; Call the macro to back up the non-GPRs + SSEs into backup_storage_area
    68                                  backup_non_gprs backup_storage_area
    90 0000001A B807000000          <1>  mov rax, 7
    91 0000001F BA00000000          <1>  mov rdx, 0
    92 00000024 0FAE2425[00000000]  <1>  xsave [%1]
    69                                  
    70                                  ; Move the arguments holding the array and its size into non-volatile GPRs r12 and r13 respectively
    71 0000002C 4989FC                  mov r12, rdi
    72 0000002F 4989F5                  mov r13, rsi
    73                                  
    74                                  ; Maintain a counter for to prevent over-indexing
    75 00000032 4D31F6                  xor r14, r14
    76                                  
    77                                  ; Start the loop of generating random numbers using rdrand and placing them into the array
    78                                  start_generating:
    79                                  
    80                                  ; Check for over-indexing by checking if r14 >= r13. If so, exit. Otherwise, continue
    81 00000035 4D39EE                  cmp r14, r13
    82 00000038 7D32                    jge end_of_loop
    83                                  
    84                                  ; Generate a random via rdrand and store it into a GPR
    85 0000003A 490FC7F7                rdrand r15
    86                                  
    87                                  ; Because we generated a IEEE number, we need to push it to the stack so an SSE can move it into the array
    88 0000003E 4157                    push r15
    89 00000040 4157                    push r15
    90 00000042 F2440F101424            movsd xmm10, [rsp]
    91 00000048 415F                    pop r15
    92 0000004A 415F                    pop r15
    93                                  
    94                                  ; Check if the generated IEEE number is a NaN by calling isnan [bool isnan(double number)]. If so, regenerate the number, otherwise put it into the array
    95 0000004C B801000000              mov rax, 1
    96 00000051 F2410F10C2              movsd xmm0, xmm10
    97 00000056 E8(00000000)            call isnan
    98 0000005B 4883F801                cmp rax, 1
    99 0000005F 74D4                    je start_generating
   100 00000061 F2470F1114F4            movsd [r12 + r14 * 8], xmm10
   101                                  
   102                                  ; Increment the counter [r14] and continue the loop
   103 00000067 49FFC6                  inc r14
   104 0000006A EBC9                    jmp start_generating
   105                                  ; End of the main loop to generate numbers to place into the array
   106                                  
   107                                  ; Exit the main loop
   108                                  end_of_loop:
   109                                  
   110                                  ; Call the macro to restore the non-GPRs + SSEs in backup_storage_area
   111                                  restore_non_gprs backup_storage_area
    97 0000006C B807000000          <1>  mov rax, 7
    98 00000071 BA00000000          <1>  mov rdx, 0
    99 00000076 0FAE2C25[00000000]  <1>  xrstor [%1]
   112                                  
   113                                  ; Call the macro to restore the GPRs
   114                                  restore_gprs
    71 0000007E 9D                  <1>  popf
    72 0000007F 415F                <1>  pop r15
    73 00000081 415E                <1>  pop r14
    74 00000083 415D                <1>  pop r13
    75 00000085 415C                <1>  pop r12
    76 00000087 415B                <1>  pop r11
    77 00000089 415A                <1>  pop r10
    78 0000008B 4159                <1>  pop r9
    79 0000008D 4158                <1>  pop r8
    80 0000008F 5E                  <1>  pop rsi
    81 00000090 5F                  <1>  pop rdi
    82 00000091 5A                  <1>  pop rdx
    83 00000092 59                  <1>  pop rcx
    84 00000093 5B                  <1>  pop rbx
    85 00000094 5D                  <1>  pop rbp
   115                                  
   116 00000095 C3                      ret
