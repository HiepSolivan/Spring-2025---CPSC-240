     1                                  ;****************************************************************************************************************************
     2                                  ; Your name as author: Solivan Hiep
     3                                  ; Your section number: CPSC 240-3
     4                                  ; Todayâ€™s date: March 10, 2025
     5                                  ; Your preferred return email address: hiepsolivan@csu.fullerton.edu
     6                                  ;****************************************************************************************************************************
     7                                  
     8                                  ; Declarations
     9                                  extern printf
    10                                  
    11                                  global sum_of_reciprocals
    12                                  
    13                                  ; Declare initialized arrays
    14                                  segment .data
    15                                  
    16                                  ; Declare uninitialized arrays
    17                                  segment .bss
    18                                  align 64
    19 00000000 <res 340h>              backup_storage_area resb 832
    20                                  
    21                                  segment .text
    22                                  sum_of_reciprocals:
    23                                  
    24                                  ; Backup the GPRs
    25 00000000 55                      push rbp
    26 00000001 4889E5                  mov rbp, rsp
    27 00000004 53                      push rbx
    28 00000005 51                      push rcx
    29 00000006 52                      push rdx
    30 00000007 57                      push rdi
    31 00000008 56                      push rsi
    32 00000009 4150                    push r8
    33 0000000B 4151                    push r9
    34 0000000D 4152                    push r10
    35 0000000F 4153                    push r11
    36 00000011 4154                    push r12
    37 00000013 4155                    push r13
    38 00000015 4156                    push r14
    39 00000017 4157                    push r15
    40 00000019 9C                      pushf
    41                                  
    42                                  ; Backup other registers/sse registers
    43 0000001A B807000000              mov rax, 7
    44 0000001F BA00000000              mov rdx, 0
    45 00000024 0FAE2425[00000000]      xsave [backup_storage_area]
    46                                  
    47                                  ; Move the arguments received (the address to the array + array size) into non-volatile registers r12 and r13 to affect the actual array + future use in logic
    48 0000002C 4989FC                  mov r12, rdi ; The array
    49 0000002F 4989F5                  mov r13, rsi ; The array's size
    50                                  
    51                                  ; Maintain a counter for the array using the non-volatile register r14 to ensure no over-indexing
    52 00000032 4D31F6                  xor r14, r14 ; Comparing r14 to itself via xor sets r14 to 0
    53                                  
    54                                  ; Kick of the main loop to find the sum of all the elements in the array
    55                                  top_of_loop:
    56                                  
    57                                  ; Check for over-indexing by determining if r14 >= r13. If so, exit. Otherwise, continue
    58 00000035 4D39EE                  cmp r14, r13
    59 00000038 7D1F                    jge out_of_loop
    60                                  
    61                                  ; Take the element at the counter [r14] and add it to the to a non-volatile register so operations are maintained
    62 0000003A F2470F1034F4            movsd xmm14, [r12 + r14 * 8]
    63                                  ; Addenendum (3/10/2025): Take the reciprocal of the element at the counter by dividing it by itself twice
    64 00000040 F2450F10EE              movsd xmm13, xmm14
    65 00000045 F2450F5EEE              divsd xmm13, xmm14
    66 0000004A F2450F5EEE              divsd xmm13, xmm14
    67 0000004F F2450F58FD              addsd xmm15, xmm13
    68                                  
    69                                  ; Increment the counter [r14] by 1 and jump back to the top of the loop
    70 00000054 49FFC6                  inc r14
    71 00000057 EBDC                    jmp top_of_loop
    72                                  ; End of main loop to print out each element in the array
    73                                  
    74                                  ; Exit the main loop and complete the program
    75                                  out_of_loop:
    76                                  
    77                                  ; Move the sum to the stack before restoring SSEs to maintain the value
    78 00000059 B800000000              mov rax, 0
    79 0000005E 6A00                    push qword 0
    80 00000060 F2440F113C24            movsd [rsp], xmm15
    81                                  
    82                                  ; Restore the values to non-GPRs/sse registers
    83 00000066 B807000000              mov rax, 7
    84 0000006B BA00000000              mov rdx, 0
    85 00000070 0FAE2C25[00000000]      xrstor [backup_storage_area]
    86                                  
    87                                  ; Send back the sum stored in rsp
    88 00000078 F20F100424              movsd xmm0, [rsp]
    89 0000007D 58                      pop rax
    90                                  
    91                                  ; Restore the GPRs
    92 0000007E 9D                      popf
    93 0000007F 415F                    pop r15
    94 00000081 415E                    pop r14
    95 00000083 415D                    pop r13
    96 00000085 415C                    pop r12
    97 00000087 415B                    pop r11
    98 00000089 415A                    pop r10
    99 0000008B 4159                    pop r9
   100 0000008D 4158                    pop r8
   101 0000008F 5E                      pop rsi
   102 00000090 5F                      pop rdi
   103 00000091 5A                      pop rdx
   104 00000092 59                      pop rcx
   105 00000093 5B                      pop rbx
   106 00000094 5D                      pop rbp   ;Restore rbp to the base of the activation record of the caller program
   107 00000095 C3                      ret
   108                                  ;End of the function sum ====================================================================
