     1                                  ;****************************************************************************************************************************
     2                                  ; Program name: "Non-deterministic random numbers".  The intent of this program is to generate up to 100 random number using *
     3                                  ; the non-deterministic random number generator found inside of modern X86 microprocessors.                                  *
     4                                  ; Copyright (C) 2025  Solivan Hiep                                                                                           *
     5                                  ; This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License  *
     6                                  ; version 3 as published by the Free Software Foundation.                                                                    *
     7                                  ; This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied         *
     8                                  ; warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.     *
     9                                  ; A copy of the GNU General Public License v3 is available here:  <https://www.gnu.org/licenses/>.                           *
    10                                  ;****************************************************************************************************************************
    11                                  
    12                                  
    13                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3=========4=========5=========6=========7**
    14                                  
    15                                  ;Author information
    16                                  ;  Author name: Solivan Hiep
    17                                  ;  Author email: hiepsolivan@csu.fullerton.edu
    18                                  ;  CWID: 8848458756
    19                                  ;  Class: CPSC 240-03 - Class Nbr 13604
    20                                  ;
    21                                  ;Program information
    22                                  ;  Program name: Non-deterministic Random Numbers
    23                                  ;  Programming languages: Five modules in X86, two modules in C++, and one in bash
    24                                  ;  Date program began: 2025-Mar-24
    25                                  ;  Date of last update: 2025-Mar-27
    26                                  ;  Files in the program: executive.asm, fill_random_array.asm, isnan.asm, normalize.asm, show_array.asm, main.cpp, sort.cpp, r.sh
    27                                  ;
    28                                  ;Purpose
    29                                  ;  The intent of this program is to generate up to 100 random number using
    30                                  ;  the non-deterministic random number generator found inside of modern X86 microprocessors.
    31                                  ;
    32                                  ;This file
    33                                  ;  File name: isnan.asm
    34                                  ;  Language: X86-64
    35                                  ;  Development Platform: Windows 11 Enterprise Ver. 24H2. Intel(R) Core(TM) i3-8145U CPU @ 2.10GHz 2.30 GHz Processor. Running on Ubuntu 22.04.5 LTS.
    36                                  ;  Max page width: 172 columns
    37                                  ;  Assemble: nasm -f elf64 -l isnan.lis -o isnan.o isnan.asm
    38                                  ;  Assemble (debug in GDB): nasm -f elf64 -gdwarf -l isnan.lis -o isnan.o isnan.asm
    39                                  ;  Page width: 172 columns
    40                                  ;  Optimal print specification: Landscape, 7 points, monospace, 8Â½x11 paper
    41                                  ;  Prototype of this function: bool isnan(double number)
    42                                  ;
    43                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3=========4=========5=========6=========7**
    44                                  ;
    45                                  ;===== Begin code area ====================================================================================================================================================
    46                                  
    47                                  ; Declarations
    48                                  %include "utilities.inc"
    49                              <1> ; Macro that backs up the GPRs
    50                              <1> %macro backup_gprs 0
    51                              <1>   push rbp
    52                              <1>   mov rbp, rsp
    53                              <1>   push rbx
    54                              <1>   push rcx
    55                              <1>   push rdx
    56                              <1>   push rdi
    57                              <1>   push rsi
    58                              <1>   push r8
    59                              <1>   push r9
    60                              <1>   push r10
    61                              <1>   push r11
    62                              <1>   push r12
    63                              <1>   push r13
    64                              <1>   push r14
    65                              <1>   push r15
    66                              <1>   pushf
    67                              <1> %endmacro
    68                              <1> 
    69                              <1> ; Macro that restores the GPRs
    70                              <1> %macro restore_gprs 0
    71                              <1>   popf
    72                              <1>   pop r15
    73                              <1>   pop r14
    74                              <1>   pop r13
    75                              <1>   pop r12
    76                              <1>   pop r11
    77                              <1>   pop r10
    78                              <1>   pop r9
    79                              <1>   pop r8
    80                              <1>   pop rsi
    81                              <1>   pop rdi
    82                              <1>   pop rdx
    83                              <1>   pop rcx
    84                              <1>   pop rbx
    85                              <1>   pop rbp
    86                              <1> %endmacro
    87                              <1> 
    88                              <1> ; Macro that back ups non-GPRs/SSEs to an array stored in parameter %1
    89                              <1> %macro backup_non_gprs 1
    90                              <1>   mov rax, 7
    91                              <1>   mov rdx, 0
    92                              <1>   xsave [%1]
    93                              <1> %endmacro
    94                              <1> 
    95                              <1> ; Macro that restores the non-GPRs/SSEs in storage array of parameter %1
    96                              <1> %macro restore_non_gprs 1
    97                              <1>   mov rax, 7
    98                              <1>   mov rdx, 0
    99                              <1>   xrstor [%1]
   100                              <1> %endmacro
   101                              <1> 
   102                              <1> ; Macro that removes the new line from a string input in parameter %1
   103                              <1> %macro remove_new_line 1
   104                              <1>   mov r12, %1
   105                              <1>   mov rax, 0
   106                              <1>   mov rdi, r12
   107                              <1>   call strlen
   108                              <1>   mov [r12 + rax - 1], byte 0
   109                              <1> %endmacro
    49                                  global isnan
    50                                  
    51                                  extern printf
    52                                  
    53                                  true equ 1
    54                                  false equ 0
    55                                  
    56                                  ; Declare initialized arrays
    57                                  segment .data
    58                                  
    59                                  ; Declare uninitialized arrays
    60                                  segment .bss
    61                                  align 64
    62 00000000 <res 340h>              backup_storage_area resb 832
    63                                  
    64                                  segment .text
    65                                  isnan:
    66                                  
    67                                  ; Call the macro to back up the GPRs
    68                                  backup_gprs
    51 00000000 55                  <1>  push rbp
    52 00000001 4889E5              <1>  mov rbp, rsp
    53 00000004 53                  <1>  push rbx
    54 00000005 51                  <1>  push rcx
    55 00000006 52                  <1>  push rdx
    56 00000007 57                  <1>  push rdi
    57 00000008 56                  <1>  push rsi
    58 00000009 4150                <1>  push r8
    59 0000000B 4151                <1>  push r9
    60 0000000D 4152                <1>  push r10
    61 0000000F 4153                <1>  push r11
    62 00000011 4154                <1>  push r12
    63 00000013 4155                <1>  push r13
    64 00000015 4156                <1>  push r14
    65 00000017 4157                <1>  push r15
    66 00000019 9C                  <1>  pushf
    69                                  
    70                                  ; Call the macro to back up the non-GPRs + SSEs into backup_storage_area
    71                                  backup_non_gprs backup_storage_area
    90 0000001A B807000000          <1>  mov rax, 7
    91 0000001F BA00000000          <1>  mov rdx, 0
    92 00000024 0FAE2425[00000000]  <1>  xsave [%1]
    72                                  
    73                                  ; Store the argument holding the number to be checked into a non-volatile SSE register xmm9
    74 0000002C F2440F10C8              movsd xmm9, xmm0
    75                                  
    76                                  ; Check if the number is a NaN by comparing it to itself and checking if it sets of the parity flag.
    77 00000031 66450F2EC9              ucomisd xmm9, xmm9
    78 00000036 7A08                    jp nan
    79                                  
    80                                  ; If we made it here, we do not have a NaN and can prepare to return a false
    81 00000038 41BF00000000            mov r15, false
    82 0000003E EB08                    jmp end_program
    83                                  
    84                                  ; Jump here if the parity flag set off, implying the existence of a NaN
    85                                  nan:
    86                                  
    87                                  ; Prepare to return a true then exit
    88 00000040 41BF01000000            mov r15, true
    89 00000046 EB00                    jmp end_program
    90                                  ; End of nan to prepare to return a true
    91                                  
    92                                  ; Exit the program and clean up the activation record
    93                                  end_program:
    94                                  
    95                                  ; Call the macro to restore the non-GPRs + SSEs in backup_storage_area
    96                                  restore_non_gprs backup_storage_area
    97 00000048 B807000000          <1>  mov rax, 7
    98 0000004D BA00000000          <1>  mov rdx, 0
    99 00000052 0FAE2C25[00000000]  <1>  xrstor [%1]
    97                                  
    98                                  ; Send back the results of the program to the caller
    99 0000005A 4C89F8                  mov rax, r15
   100                                  
   101                                  ; Call the macro to restore the GPRs
   102                                  restore_gprs
    71 0000005D 9D                  <1>  popf
    72 0000005E 415F                <1>  pop r15
    73 00000060 415E                <1>  pop r14
    74 00000062 415D                <1>  pop r13
    75 00000064 415C                <1>  pop r12
    76 00000066 415B                <1>  pop r11
    77 00000068 415A                <1>  pop r10
    78 0000006A 4159                <1>  pop r9
    79 0000006C 4158                <1>  pop r8
    80 0000006E 5E                  <1>  pop rsi
    81 0000006F 5F                  <1>  pop rdi
    82 00000070 5A                  <1>  pop rdx
    83 00000071 59                  <1>  pop rcx
    84 00000072 5B                  <1>  pop rbx
    85 00000073 5D                  <1>  pop rbp
   103                                  
   104 00000074 C3                      ret
